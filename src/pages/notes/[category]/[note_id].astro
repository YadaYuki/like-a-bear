---
import Layout from "~/components/layouts/Layout.astro";
import TitleSection from "~/components/note-detail/TitleSection.astro";
import RelatedNoteList from "~/components/note-detail/RelatedNoteList.astro";
import TwitterShareButton from "~/components/note-detail/TwitterShareButton.astro";
import { constructTwitterShareURL } from "~/utils/string";
import { sortNoteListByPubDate } from "~/utils/collection";
import { getCollection, CollectionEntry } from "astro:content";
import { ExternalNotes } from "~/data/externalNotes";
import { ContentBasedRecommender } from "~/domain/recommend/ContentBasedRecommender";
import { TfIdfDocumentVectorizer } from "~/domain/recommend/documentVectorizer/TfIdfDocumentVectorizer";
import type { TokenizedDocument } from "~/domain/recommend/type";
import { CosineSimilarityCalculator } from "~/domain/recommend/similarityCalculator/CosineSimilarityCalculator";
import type { NoteType } from "~/schemas/note";

// TODO: Recommend Items

type Props = {
  note: CollectionEntry<"notes">;
  relatedNoteItems: NoteType[];
};

export async function getStaticPaths() {
  const collections = await getCollection("notes");
  const internalNotes = collections.map((collection) => collection.data);
  const noteItems = sortNoteListByPubDate([...internalNotes, ...ExternalNotes]);

  const recommender = new ContentBasedRecommender(
    new TfIdfDocumentVectorizer(),
    new CosineSimilarityCalculator()
  );

  // noteに付与されたタグを用いる。
  const tokenizedDocuments: TokenizedDocument[] = noteItems.map((item) => {
    const documentId = (
      item.externalLink !== undefined ? item.externalLink : item.noteId
    ) as string;
    const tokenizedContent = item.tags;
    return { documentId, tokenizedContent };
  });
  recommender.fit(tokenizedDocuments, 4);

  return collections.map((note) => {
    const item = note.data;
    const documentId = (
      item.externalLink !== undefined ? item.externalLink : item.noteId
    ) as string;
    const recommendedDocumentIds =
      recommender.getRecommendItemById(documentId).recommendedDocuments;

    const relatedNoteItems = recommendedDocumentIds.map((id) => {
      return noteItems.find(
        (item) => item.externalLink === id || item.noteId === id
      );
    });

    return {
      params: { note_id: note.slug, category: note.data.category },
      props: { note, relatedNoteItems },
    };
  });
}
const { note, relatedNoteItems } = Astro.props;
const { Content } = await note.render();

const url = Astro.url.toString();
---

<Layout page={"notes"}>
  <TitleSection noteItem={note.data} />
  <TwitterShareButton shareUrl={constructTwitterShareURL(url)} />
  <div class="note_content_wrapper">
    <Content />
  </div>
  <RelatedNoteList relatedNoteList={relatedNoteItems} />
</Layout>
<style is:global>
  @media screen and (max-width: 768px) {
    main {
      margin: 0 !important;
    }
  }
  @media screen and (min-width: 768px) {
    .note_content_wrapper {
      border-radius: 4px;
    }
  }

  .note_content_wrapper {
    background-color: #fff;
    margin: 20px 0;
    padding: 8px 16px;
    font-family: "Noto Sans JP", sans-serif;
  }
  .note_content_wrapper h1 {
    margin: 0;
  }
  .note_content_wrapper h1::after,
  .note_content_wrapper h2::after {
    height: 1px;
    display: block;
    content: " ";
    background: #f2f2f2;
    margin-top: 8px;
  }
  .note_content_wrapper p {
    line-height: 1.8em;
  }

  .note_content_wrapper li {
    line-height: 1.8em;
  }

  .note_content_wrapper img {
    width: 100%;
  }
  .note_content_wrapper pre.astro-code {
    padding: 1rem;
    border-radius: 0.375rem;
  }
</style>
